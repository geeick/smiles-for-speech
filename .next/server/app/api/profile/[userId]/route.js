(()=>{var e={};e.id=6914,e.ids=[6914],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},7462:(e,r,s)=>{"use strict";s.d(r,{db:()=>i});var t=s(96330);let i=globalThis.prisma||new t.PrismaClient},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},76592:(e,r,s)=>{"use strict";s.r(r),s.d(r,{patchFetch:()=>x,routeModule:()=>p,serverHooks:()=>g,workAsyncStorage:()=>c,workUnitAsyncStorage:()=>f});var t={};s.r(t),s.d(t,{GET:()=>u,PUT:()=>d});var i=s(96559),o=s(48088),n=s(37719),a=s(32190),l=s(7462);async function u(e,{params:r}){let{userId:s}=r;if(!s)return a.NextResponse.json({error:"Missing userId"},{status:400});try{let e=await l.db.user.findUnique({where:{id:s},include:{selfProfile:!0}});if(!e||!e.selfProfile)return a.NextResponse.json({error:"Profile not found"},{status:404});let r={id:e.id,name:e.name,age:e.selfProfile.age,sex:e.selfProfile.sex,diagnosis:e.selfProfile.diagnosis,seekingDiagnosis:e.selfProfile.seekingDiagnosis,challenges:e.selfProfile.challenges,location:e.selfProfile.location};return a.NextResponse.json(r,{status:200})}catch(e){return console.error("Profile fetch error:",e),a.NextResponse.json({error:"Internal server error"},{status:500})}}async function d(e,{params:r}){let{userId:s}=r;if(!s)return a.NextResponse.json({error:"Missing userId"},{status:400});try{let r=await e.json();return r.name&&await l.db.user.update({where:{id:s},data:{name:r.name}}),await l.db.selfProfile.update({where:{userId:s},data:{age:r.age,sex:r.sex,diagnosis:r.diagnosis,seekingDiagnosis:r.seekingDiagnosis,challenges:r.challenges,location:r.location}}),a.NextResponse.json({message:"Profile updated successfully"},{status:200})}catch(e){return console.error("Profile update error:",e),a.NextResponse.json({error:"Failed to update profile"},{status:500})}}let p=new i.AppRouteRouteModule({definition:{kind:o.RouteKind.APP_ROUTE,page:"/api/profile/[userId]/route",pathname:"/api/profile/[userId]",filename:"route",bundlePath:"app/api/profile/[userId]/route"},resolvedPagePath:"/Users/georgiaeick/Downloads/smiles-for-speech/app/api/profile/[userId]/route.ts",nextConfigOutput:"",userland:t}),{workAsyncStorage:c,workUnitAsyncStorage:f,serverHooks:g}=p;function x(){return(0,n.patchFetch)({workAsyncStorage:c,workUnitAsyncStorage:f})}},78335:()=>{},96330:e=>{"use strict";e.exports=require("@prisma/client")},96487:()=>{}};var r=require("../../../../webpack-runtime.js");r.C(e);var s=e=>r(r.s=e),t=r.X(0,[4243,580],()=>s(76592));module.exports=t})();