datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  password     String
  name         String?
  selfProfile  SelfProfile?
  caretakerProfile CaretakerProfile?
  accounts         Account[]
  sessions         Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// prisma/schema.prisma

model SelfProfile {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @unique
  consent          Boolean  @default(false)
  name             String
  age              Int
  sex              String
  diagnosis        String?
  seekingDiagnosis Boolean
  challenges       String[] @default([]) // stored as a Postgres array
  location         String?
  createdAt        DateTime @default(now())
}

model CaretakerProfile {
  id               String     @id @default(cuid())
  user             User       @relation(fields: [userId], references: [id])
  userId           String     @unique
  consent          Boolean    @default(false)
  lovedOnesCount   Int
  diagnosisStatus  String
  attendsSchool    Boolean
  receivesServices String
  createdAt        DateTime   @default(now())
  lovedOnes        LovedOne[]
}

model LovedOne {
  id              String           @id @default(cuid())
  caretaker       CaretakerProfile @relation(fields: [caretakerId], references: [id])
  caretakerId     String
  consent         Boolean          @default(false)
  name            String
  age             Int
  sex             String
  diagnosisStatus String
  concerns        String?
  seekingSupport  Boolean
  createdAt       DateTime         @default(now())
}
